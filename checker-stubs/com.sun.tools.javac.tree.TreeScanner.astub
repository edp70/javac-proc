package com.sun.tools.javac.tree;

import org.checkerframework.checker.nullness.qual.Nullable;

class TreeScanner extends Visitor {
    TreeScanner();
    void scan(@Nullable JCTree arg0);
    void scan(@Nullable List<? extends JCTree> arg0);
    void visitTopLevel(JCCompilationUnit arg0);
    void visitImport(JCImport arg0);
    void visitClassDef(JCClassDecl arg0);
    void visitMethodDef(JCMethodDecl arg0);
    void visitVarDef(JCVariableDecl arg0);
    void visitSkip(JCSkip arg0);
    void visitBlock(JCBlock arg0);
    void visitDoLoop(JCDoWhileLoop arg0);
    void visitWhileLoop(JCWhileLoop arg0);
    void visitForLoop(JCForLoop arg0);
    void visitForeachLoop(JCEnhancedForLoop arg0);
    void visitLabelled(JCLabeledStatement arg0);
    void visitSwitch(JCSwitch arg0);
    void visitCase(JCCase arg0);
    void visitSynchronized(JCSynchronized arg0);
    void visitTry(JCTry arg0);
    void visitCatch(JCCatch arg0);
    void visitConditional(JCConditional arg0);
    void visitIf(JCIf arg0);
    void visitExec(JCExpressionStatement arg0);
    void visitBreak(JCBreak arg0);
    void visitContinue(JCContinue arg0);
    void visitReturn(JCReturn arg0);
    void visitThrow(JCThrow arg0);
    void visitAssert(JCAssert arg0);
    void visitApply(JCMethodInvocation arg0);
    void visitNewClass(JCNewClass arg0);
    void visitNewArray(JCNewArray arg0);
    void visitLambda(JCLambda arg0);
    void visitParens(JCParens arg0);
    void visitAssign(JCAssign arg0);
    void visitAssignop(JCAssignOp arg0);
    void visitUnary(JCUnary arg0);
    void visitBinary(JCBinary arg0);
    void visitTypeCast(JCTypeCast arg0);
    void visitTypeTest(JCInstanceOf arg0);
    void visitIndexed(JCArrayAccess arg0);
    void visitSelect(JCFieldAccess arg0);
    void visitReference(JCMemberReference arg0);
    void visitIdent(JCIdent arg0);
    void visitLiteral(JCLiteral arg0);
    void visitTypeIdent(JCPrimitiveTypeTree arg0);
    void visitTypeArray(JCArrayTypeTree arg0);
    void visitTypeApply(JCTypeApply arg0);
    void visitTypeUnion(JCTypeUnion arg0);
    void visitTypeIntersection(JCTypeIntersection arg0);
    void visitTypeParameter(JCTypeParameter arg0);
    void visitWildcard(JCWildcard arg0);
    void visitTypeBoundKind(TypeBoundKind arg0);
    void visitModifiers(JCModifiers arg0);
    void visitAnnotation(JCAnnotation arg0);
    void visitAnnotatedType(JCAnnotatedType arg0);
    void visitErroneous(JCErroneous arg0);
    void visitLetExpr(LetExpr arg0);
    void visitTree(JCTree arg0);
}
