package com.sun.tools.javac.tree;

import org.checkerframework.checker.nullness.qual.Nullable;

// XXX TODO complete...
class TreeMaker implements Factory {
    protected static final Key<TreeMaker> treeMakerKey;
    int pos;
    JCCompilationUnit toplevel;
    static TreeMaker instance(Context arg0);
    protected TreeMaker(Context arg0);
    protected TreeMaker(JCCompilationUnit arg0, Names arg1, Types arg2, Symtab arg3);
    TreeMaker forToplevel(JCCompilationUnit arg0);
    TreeMaker at(int arg0);
    TreeMaker at(DiagnosticPosition arg0);
    JCCompilationUnit TopLevel(List<JCAnnotation> arg0, JCExpression arg1, List<JCTree> arg2);
    JCImport Import(JCTree arg0, boolean arg1);
    JCClassDecl ClassDef(JCModifiers arg0, Name arg1, List<JCTypeParameter> arg2, JCExpression arg3, List<JCExpression> arg4, List<JCTree> arg5);
    JCMethodDecl MethodDef(JCModifiers arg0, Name arg1, JCExpression arg2, List<JCTypeParameter> arg3, List<JCVariableDecl> arg4, List<JCExpression> arg5, JCBlock arg6, JCExpression arg7);
    JCMethodDecl MethodDef(JCModifiers arg0, Name arg1, JCExpression arg2, List<JCTypeParameter> arg3, JCVariableDecl arg4, List<JCVariableDecl> arg5, List<JCExpression> arg6, JCBlock arg7, JCExpression arg8);
    JCVariableDecl VarDef(JCModifiers arg0, Name arg1, JCExpression arg2, @Nullable JCExpression arg3);
    JCVariableDecl ReceiverVarDef(JCModifiers arg0, JCExpression arg1, JCExpression arg2);
    JCSkip Skip();
    JCBlock Block(long arg0, List<JCStatement> arg1);
    JCDoWhileLoop DoLoop(JCStatement arg0, JCExpression arg1);
    JCWhileLoop WhileLoop(JCExpression arg0, JCStatement arg1);
    JCForLoop ForLoop(List<JCStatement> arg0, JCExpression arg1, List<JCExpressionStatement> arg2, JCStatement arg3);
    JCEnhancedForLoop ForeachLoop(JCVariableDecl arg0, JCExpression arg1, JCStatement arg2);
    JCLabeledStatement Labelled(Name arg0, JCStatement arg1);
    JCSwitch Switch(JCExpression arg0, List<JCCase> arg1);
    JCCase Case(JCExpression arg0, List<JCStatement> arg1);
    JCSynchronized Synchronized(JCExpression arg0, JCBlock arg1);
    JCTry Try(JCBlock arg0, List<JCCatch> arg1, @Nullable JCBlock arg2);
    JCTry Try(@Nullable List<JCTree> arg0, JCBlock arg1, List<JCCatch> arg2, @Nullable JCBlock arg3);
    JCCatch Catch(JCVariableDecl arg0, JCBlock arg1);
    JCConditional Conditional(JCExpression arg0, JCExpression arg1, JCExpression arg2);
    JCIf If(JCExpression arg0, @Nullable JCStatement arg1, @Nullable JCStatement arg2);
    JCExpressionStatement Exec(JCExpression arg0);
    JCBreak Break(@Nullable Name arg0);
    JCContinue Continue(Name arg0);
    JCReturn Return(JCExpression arg0);
    JCThrow Throw(JCExpression arg0);
    JCAssert Assert(JCExpression arg0, JCExpression arg1);
    JCMethodInvocation Apply(List<JCExpression> arg0, JCExpression arg1, List<JCExpression> arg2);
    JCNewClass NewClass(@Nullable JCExpression arg0, @Nullable List<JCExpression> arg1, JCExpression arg2, List<JCExpression> arg3, @Nullable JCClassDecl arg4);
    JCNewArray NewArray(JCExpression arg0, List<JCExpression> arg1, List<JCExpression> arg2);
    JCLambda Lambda(List<JCVariableDecl> arg0, JCTree arg1);
    JCParens Parens(JCExpression arg0);
    JCAssign Assign(JCExpression arg0, JCExpression arg1);
    JCAssignOp Assignop(Tag arg0, JCTree arg1, JCTree arg2);
    JCUnary Unary(Tag arg0, JCExpression arg1);
    JCBinary Binary(Tag arg0, JCExpression arg1, JCExpression arg2);
    JCTypeCast TypeCast(JCTree arg0, JCExpression arg1);
    JCInstanceOf TypeTest(JCExpression arg0, JCTree arg1);
    JCArrayAccess Indexed(JCExpression arg0, JCExpression arg1);
    JCFieldAccess Select(JCExpression arg0, Name arg1);
    JCMemberReference Reference(ReferenceMode arg0, Name arg1, JCExpression arg2, List<JCExpression> arg3);
    JCIdent Ident(Name arg0);
    JCLiteral Literal(TypeTag arg0, @Nullable Object arg1);
    JCPrimitiveTypeTree TypeIdent(TypeTag arg0);
    JCArrayTypeTree TypeArray(JCExpression arg0);
    JCTypeApply TypeApply(JCExpression arg0, List<JCExpression> arg1);
    JCTypeUnion TypeUnion(List<JCExpression> arg0);
    JCTypeIntersection TypeIntersection(List<JCExpression> arg0);
    JCTypeParameter TypeParameter(Name arg0, List<JCExpression> arg1);
    JCTypeParameter TypeParameter(Name arg0, List<JCExpression> arg1, List<JCAnnotation> arg2);
    JCWildcard Wildcard(TypeBoundKind arg0, JCTree arg1);
    TypeBoundKind TypeBoundKind(BoundKind arg0);
    JCAnnotation Annotation(JCTree arg0, List<JCExpression> arg1);
    JCAnnotation TypeAnnotation(JCTree arg0, List<JCExpression> arg1);
    JCModifiers Modifiers(long arg0, List<JCAnnotation> arg1);
    JCModifiers Modifiers(long arg0);
    JCAnnotatedType AnnotatedType(List<JCAnnotation> arg0, JCExpression arg1);
    JCErroneous Erroneous();
    JCErroneous Erroneous(List<? extends JCTree> arg0);
    LetExpr LetExpr(List<JCVariableDecl> arg0, JCTree arg1);
    JCClassDecl AnonymousClassDef(JCModifiers arg0, List<JCTree> arg1);
    LetExpr LetExpr(JCVariableDecl arg0, JCTree arg1);
    JCIdent Ident(Symbol arg0);
    JCExpression Select(JCExpression arg0, Symbol arg1);
    JCExpression QualIdent(Symbol arg0);
    JCExpression Ident(JCVariableDecl arg0);
    List<JCExpression> Idents(List<JCVariableDecl> arg0);
    JCExpression This(Type arg0);
    JCExpression ClassLiteral(ClassSymbol arg0);
    JCExpression ClassLiteral(Type arg0);
    JCIdent Super(Type arg0, TypeSymbol arg1);
    JCMethodInvocation App(JCExpression arg0, List<JCExpression> arg1);
    JCMethodInvocation App(JCExpression arg0);
    JCExpression Create(Symbol arg0, List<JCExpression> arg1);
    JCExpression Type(Type arg0);
    List<JCExpression> Types(List<Type> arg0);
    JCVariableDecl VarDef(VarSymbol arg0, @Nullable JCExpression arg1);
    List<JCAnnotation> Annotations(List<Compound> arg0);
    JCLiteral Literal(Object arg0);
    JCAnnotation Annotation(Attribute arg0);
    JCAnnotation TypeAnnotation(Attribute arg0);
    JCMethodDecl MethodDef(MethodSymbol arg0, JCBlock arg1);
    JCMethodDecl MethodDef(MethodSymbol arg0, Type arg1, JCBlock arg2);
    JCTypeParameter TypeParam(Name arg0, TypeVar arg1);
    List<JCTypeParameter> TypeParams(List<Type> arg0);
    JCVariableDecl Param(Name arg0, Type arg1, Symbol arg2);
    List<JCVariableDecl> Params(List<Type> arg0, Symbol arg1);
    JCStatement Call(JCExpression arg0);
    JCStatement Assignment(Symbol arg0, JCExpression arg1);
    JCArrayAccess Indexed(Symbol arg0, JCExpression arg1);
    JCTypeCast TypeCast(Type arg0, JCExpression arg1);
    Name paramName(int arg0);
    Name typaramName(int arg0);
}
